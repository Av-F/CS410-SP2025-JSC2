Explanation and What You Need to Do:

Includes: You need headers for FreeRTOS, GPIO, ESP logging, NVS flash (for Bluetooth), and the BLE/HID specific headers.
GPIO Definitions: Define your button GPIO pins as before.
BUTTON_PRESSED_LEVEL: Define the logic level that indicates a button is pressed (usually GPIO_LEVEL_LOW with pull-ups).
BUTTON_DEBOUNCE_DELAY_MS: A debounce delay.
hid_device_config: This structure configures the BLE HID device. You must fill in the vendor_id, product_id, and version fields appropriately. The device_name and other fields can be customized.
send_gamepad_report(): This is the core function you need to implement.
It takes the current button state as input.
It needs to create a data packet (report byte array) that conforms to the HID Report Descriptor for a gamepad.
The HID Report Descriptor tells the connected device the layout of your report (e.g., which bytes represent which buttons or axes).
You then use esp_hid_device_send_report() to send this packet over the BLE connection.
read_buttons_task(): This FreeRTOS task continuously reads the state of the GPIO pins.
It combines the individual button states into a single uint8_t where each bit represents a button.
It includes a simple debounce mechanism.
Crucially: When the button state changes after debouncing, it calls send_gamepad_report() to notify the connected device.
app_main(): This is the main entry point.
Initializes NVS flash (required for the BLE stack).
Initializes and enables the ESP32's Bluetooth controller and Bluedroid stack.
Initializes the esp_hid_device component. This component significantly simplifies implementing BLE HID. You need to ensure this component is included in your ESP-IDF project. Refer to the ESP-IDF examples (esp-idf/examples/bluetooth/bluedroid/ble/ble_hid_device) for how to set up the component and the HID Report Descriptor.
Creates the read_buttons_task to handle button reading.
Steps to Get This Working:

Set up ESP-IDF: Ensure you have a working ESP-IDF environment.
Create a New Project: Start a new ESP-IDF project.
Add the esp_hid_device component: The easiest way is often to copy the components/esp_hid_device directory from the ESP-IDF examples or clone it if it's available as a separate component repository.
Copy the Code: Put the provided code into your main.c or main.cpp file within the project's main directory.
Define Your HID Report Descriptor: This is the most complex part. You need to define a byte array that describes your gamepad's capabilities according to the HID protocol. This tells the receiving device how to interpret the data sent in your reports. Refer to the ESP-IDF ble_hid_device example for how to define and use the HID_REPORT_MAP array.
Implement send_gamepad_report(): Write the logic to populate the report buffer based on the button_state and your HID Report Descriptor.
Configure GPIO Pins: Update the BUTTON_A_PIN, etc., definitions to match your hardware.
Build, Flash, and Monitor: Build the project using idf.py build, flash it with idf.py -p <your_port> flash, and monitor the serial output with idf.py monitor.
Pair the Gamepad: On your computer or device, scan for BLE devices. You should see "ESP32 Gamepad". Pair with it. If it's a compatible HID host, it should recognize it as a gamepad.
Alternative: Arduino Framework:

If you are more comfortable with the Arduino framework for ESP32, there are libraries that simplify BLE HID implementation, such as the ESP32-BLE-Gamepad library (search for it in the Arduino Library Manager or online). This can abstract away much of the complex BLE/HID setup and allow you to focus more on the button reading part within the Arduino sketch structure (setup() and loop()).